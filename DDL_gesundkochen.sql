-- TABLE RECIPE
CREATE TABLE RECIPE(
RID INTEGER                 NOT NULL,
RTITLE VARCHAR(50)          NOT NULL, 
RDESCRIPTION VARCHAR(1000)   NOT NULL, 
RMONTH VARCHAR(255)NOT NULL,
CONSTRAINT RECIPE_PK PRIMARY KEY(RID)
);

INSERT INTO RECIPE (RTITLE, RDESCRIPTION, RMONTH) VALUES ("TEST", "TEST", "Test");

CREATE SEQUENCE RID_SEQ 
START WITH 100
MINVALUE 1
INCREMENT BY 1
CACHE 1000;

CREATE OR REPLACE TRIGGER RID_TRIGGER
BEFORE INSERT 
ON RECIPE
FOR EACH ROW
BEGIN
    SELECT RID_SEQ.nextval
    INTO :new.RID
    FROM dual;
END;
/

-- PROCEDURE DELETE RECIPE
CREATE OR REPLACE PROCEDURE RDELETERECIPE (
    RRID IN RECIPE.RID%TYPE,
    RERRORCODE OUT NUMBER
)
AS
    BEGIN
        DELETE
        FROM RECIPE
        WHERE RRID = RECIPE.RID;
        
        RERRORCODE := SQL%ROWCOUNT;
        IF(RERRORCODE=1)
        THEN 
            COMMIT;
        ELSE
            ROLLBACK;
        END IF;
        EXCEPTION
        WHEN OTHERS
        THEN
            RERRORCODE := SQLCODE;
    END RDELETERECIPE;
    /
       

-- NEXT TABLE -- NEXT TABLE --NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE 


-- TABLE INGREDIENT
CREATE TABLE INGREDIENT(
IINGREDIENTNAME VARCHAR(255)NOT NULL,
IINGREDIENTTYPE VARCHAR(255)NOT NULL,
IPREP VARCHAR(500) DEFAULT 'Keine Information', 
CONSTRAINT IINGREDIENT_PK PRIMARY KEY(IINGREDIENTNAME)
);

DELETE FROM INGREDIENT
WHERE IINGREDIENTNAME = 'GURKE';


-- NEXT TABLE -- NEXT TABLE --NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE 

-- TABLE HAS
CREATE TABLE HAS(
RID INTEGER,
IINGREDIENTNAME VARCHAR(255),
INGAMOUNT INTEGER,
INGUNIT VARCHAR(10),
CONSTRAINT HAS_PK PRIMARY KEY(IINGREDIENTNAME, RID),
CONSTRAINT HASING_FK FOREIGN KEY(IINGREDIENTNAME) REFERENCES INGREDIENT(IINGREDIENTNAME) ON DELETE CASCADE,
CONSTRAINT HASRECIPE_FK FOREIGN KEY(RID) REFERENCES RECIPE(RID)  ON DELETE CASCADE
);

-- NEXT TABLE -- NEXT TABLE --NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE 

-- TABLE AYURVEDIC
CREATE TABLE AYURVEDIC(
IINGREDIENTNAME VARCHAR(255),
AAYURVDIETACRONYM VARCHAR(255) DEFAULT 'AYURV',
AAYURVPHILOSOPHY VARCHAR(500)NOT NULL,
ADOSHA VARCHAR(255) DEFAULT 'Alle',
CONSTRAINT AYURVEDIC_PK PRIMARY KEY(IINGREDIENTNAME, AAYURVDIETACRONYM),
CONSTRAINT AYURVEDIC_INGREDIENT_FK FOREIGN KEY(IINGREDIENTNAME) REFERENCES INGREDIENT(IINGREDIENTNAME)
);

-- NEXT TABLE -- NEXT TABLE --NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE 


-- TABLE ALLERGY
CREATE TABLE ALLERGY(
AINTOLLERANCENAME VARCHAR(255)NOT NULL,
ADESCRIPTION VARCHAR(500)NOT NULL, 
CONSTRAINT ALLERGY_PK PRIMARY KEY(AINTOLLERANCENAME)
);
 
 
-- TABLE UUSER
CREATE TABLE UUSER(
  	UMANAGERNAME VARCHAR(255), 
    UUSERFIRSTNAME VARCHAR(255)NOT NULL,
    UUSERLASTNAME VARCHAR(255)NOT NULL,
    UUSERNAME VARCHAR(255)NOT NULL,
    UGENDER VARCHAR(10) DEFAULT NULL,
    CONSTRAINT UUSER_PK PRIMARY KEY(UUSERNAME)
);

-- NEXT TABLE -- NEXT TABLE --NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE 

-- TABLE MEDICALHEALTHBENEFIT
CREATE TABLE MEDICALHEALTHBENEFIT(
MHBNAME VARCHAR(255) UNIQUE,
IINGREDIENTNAME VARCHAR(255),
MHBDESCRIPTION VARCHAR(500)NOT NULL,
CONSTRAINT MEDICALHEALTHBENEFIT_PK PRIMARY KEY(IINGREDIENTNAME, MHBNAME),
CONSTRAINT MEDICINGREDIENT_FK FOREIGN KEY(IINGREDIENTNAME) REFERENCES INGREDIENT(IINGREDIENTNAME)
);

-- NEXT TABLE -- NEXT TABLE --NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE 

-- TABLE SEASONALITY
CREATE TABLE SEASONALITY(
IINGREDIENTNAME VARCHAR(255), 
SEASONALITYID INTEGER,
INGJAN VARCHAR(255) DEFAULT 'Außerhalb Jahreszeit', 
INGFEB VARCHAR(255) DEFAULT 'Außerhalb Jahreszeit', 
INGMAR VARCHAR(255) DEFAULT 'Außerhalb Jahreszeit', 
INGAPR VARCHAR(255) DEFAULT 'Außerhalb Jahreszeit', 
INGMAY VARCHAR(255) DEFAULT 'Außerhalb Jahreszeit', 
INGJUN VARCHAR(255) DEFAULT 'Außerhalb Jahreszeit', 
INGJUL VARCHAR(255) DEFAULT 'Außerhalb Jahreszeit', 
INGAUG VARCHAR(255) DEFAULT 'Außerhalb Jahreszeit', 
INGSEP VARCHAR(255) DEFAULT 'Außerhalb Jahreszeit', 
INGOCT VARCHAR(255) DEFAULT 'Außerhalb Jahreszeit', 
INGNOV VARCHAR(255) DEFAULT 'Außerhalb Jahreszeit', 
INGDEC VARCHAR(255) DEFAULT 'Außerhalb Jahreszeit',
CONSTRAINT SEASONALITY_PK PRIMARY KEY(IINGREDIENTNAME, SEASONALITYID),
CONSTRAINT SEASO_INGREDIENT_FK FOREIGN KEY(IINGREDIENTNAME) REFERENCES INGREDIENT(IINGREDIENTNAME)
);

-- SEQUENCE

CREATE SEQUENCE SEASONALITYID_SEQ 
MINVALUE 200
START WITH 200
INCREMENT BY 10
CACHE 100;

-- TRIGGER

CREATE OR REPLACE TRIGGER SEASONALITYID_TRIGGER
BEFORE INSERT ON SEASONALITY
FOR EACH ROW

BEGIN
   
    SELECT SEASONALITYID_SEQ.nextval
    INTO :new.SEASONALITYID
    FROM dual;

END;
/


-- NEXT TABLE -- NEXT TABLE --NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE 

-- TABLE REGIONALITY
CREATE TABLE REGIONALITY(
IINGREDIENTNAME VARCHAR(255), 
REGIONALITYID INTEGER,
RCOUNTRY VARCHAR(255),
RCITY VARCHAR(255),
CONSTRAINT REGIONALITY_PK PRIMARY KEY(IINGREDIENTNAME, REGIONALITYID),
CONSTRAINT REGIO_INGREDIENT_FK FOREIGN KEY(IINGREDIENTNAME) REFERENCES INGREDIENT(IINGREDIENTNAME)
);

-- SEQUENCE

CREATE SEQUENCE REGIONALITYID_SEQ 
MINVALUE 300
START WITH 300
INCREMENT BY 10
CACHE 100;

-- TRIGGER

CREATE OR REPLACE TRIGGER REGIONALITYID_TRIGGER
BEFORE INSERT ON REGIONALITY
FOR EACH ROW

BEGIN
   
    SELECT REGIONALITYID_SEQ.nextval
    INTO :new.REGIONALITYID
    FROM dual;

END;
/

-- NEXT TABLE -- NEXT TABLE --NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE 

-- TABLE SELECTSMANY
CREATE TABLE SELECTSMANY(
UUSERNAME VARCHAR(255),
RID INTEGER,
CONSTRAINT HASMANYUSER_PK PRIMARY KEY(UUSERNAME, RID),
CONSTRAINT HASMANYUSER_FK FOREIGN KEY(UUSERNAME) REFERENCES UUSER(UUSERNAME),
CONSTRAINT HASMANYRECIPE_FK FOREIGN KEY(RID) REFERENCES RECIPE(RID)
);


-- NEXT TABLE -- NEXT TABLE --NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE -- NEXT TABLE 

-- TABLE HASSEVERAL
CREATE TABLE HASSEVERAL(
UUSERNAME VARCHAR(255),
AINTOLLERANCENAME VARCHAR(255),
CONSTRAINT HASSEVERALUSER_PK PRIMARY KEY(UUSERNAME, AINTOLLERANCENAME),
CONSTRAINT HASSEVERALUSER_FK FOREIGN KEY(UUSERNAME) REFERENCES UUSER(UUSERNAME),
CONSTRAINT HASSEVERAL_FK FOREIGN KEY(AINTOLLERANCENAME) REFERENCES ALLERGY(AINTOLLERANCENAME)
);



